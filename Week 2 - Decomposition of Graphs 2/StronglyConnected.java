import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class StronglyConnected {
    // ------- Step 1: topological sort on (reversed) graph ---------------
    private static LinkedList<Integer> toposort(List<Integer>[] adj) {
        boolean[] visited = new boolean[adj.length];
        LinkedList<Integer> order = new LinkedList<Integer>();
        for (int i = 0; i < adj.length; i++) {
            if (!visited[i])
                dfs(adj, visited, order, i);
        }
        return order;
    }

    private static void dfs(List<Integer>[] adj, boolean[] visited, LinkedList<Integer> order, int v) {
        visited[v] = true;
        for (int w : adj[v]) {
            if (!visited[w])
                dfs(adj, visited, order, w);
        }
        order.addFirst(v);
    }

    // this returns a reversed directed graph
    @SuppressWarnings({"unchecked", "rawtypes"})
    private static List<Integer>[] reversedGraph(List<Integer>[] adj) {
        List<Integer>[] reversed_adj = (LinkedList<Integer>[])new LinkedList[adj.length];
        for (int i = 0; i < reversed_adj.length; i++) {
            reversed_adj[i] = new LinkedList<Integer>();
        }
        
        for (int v = 0; v < adj.length; v++) {
            for (int w : adj[v]) {
                reversed_adj[w].add(v);
            }
        }
        return reversed_adj;
    }

    // ------- Step 2: counting strongly connected components ---------------
    private static void dfs(List<Integer>[] adj, boolean[] visited, int s) {
        visited[s] = true;
        for (int v : adj[s]) {
            if (!visited[v])
                dfs(adj, visited, v);
        }
    }

    private static int numberOfStronglyConnectedComponents(List<Integer>[] adj) {
        int count = 0;  // number of SCC
        List<Integer> order = toposort(reversedGraph(adj));
        boolean[] visited = new boolean[order.size()];
        for (int v : order) {
            if (!visited[v]) {
                dfs(adj, visited, v);
                count++;  // one SCC found
            }
        }
        return count;
    }

    @SuppressWarnings({"unchecked", "rawtypes"}) // supress warnings generated by generic array
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<Integer>[] adj = (LinkedList<Integer>[])new LinkedList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new LinkedList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            int x, y;
            x = scanner.nextInt();
            y = scanner.nextInt();
            adj[x - 1].add(y - 1);
        }
        System.out.println(numberOfStronglyConnectedComponents(adj));
    }
}

