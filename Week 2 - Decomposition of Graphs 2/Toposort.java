import java.util.LinkedList;
import java.util.Scanner;

public class Toposort {
    private static LinkedList<Integer> toposort(LinkedList<Integer>[] adj) {
        //int used[] = new int[adj.length];
        boolean[] visited = new boolean[adj.length];
        LinkedList<Integer> order = new LinkedList<Integer>();
        for (int i = 0; i < adj.length; i++) {
            if (!visited[i]) {
                dfs(adj, visited, order, i);
            }
        }
        return order;
    }

    private static void dfs(LinkedList<Integer>[] adj, boolean[] visited, LinkedList<Integer> order, int s) {
        visited[s] = true;
        for (int v : adj[s]) {
            if (!visited[v])
                dfs(adj, visited, order, v);
        }
        order.addFirst(s);
    }

    @SuppressWarnings({"unchecked", "rawtypes"}) // supress warnings generated by generic array
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        LinkedList<Integer>[] adj = (LinkedList<Integer>[])new LinkedList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new LinkedList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            int x, y;
            x = scanner.nextInt();
            y = scanner.nextInt();
            adj[x - 1].add(y - 1);
        }
        LinkedList<Integer> order = toposort(adj);
        for (int x : order) {
            System.out.print((x + 1) + " ");
        }
    }
}

