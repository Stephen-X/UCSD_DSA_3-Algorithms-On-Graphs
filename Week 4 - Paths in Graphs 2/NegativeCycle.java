import java.util.ArrayList;
import java.util.Scanner;

public class NegativeCycle {
    // output 1 if the graph contains a cycle of negative weight and 0 otherwise
    private static int negativeCycle(ArrayList<Integer>[] adj, ArrayList<Integer>[] cost) {
        //int s = 0;  // set starting node to node 1
        int[] dist = new int[adj.length];  // distance to s
        int[] prev = new int[adj.length];  // adjacent previous node
        for (int i = 0; i < adj.length; i++) {
            //dist[i] = Integer.MAX_VALUE;
            // set a virtual starting node with outgoing 0-weighted edges to all other nodes;
            //  used to detect negative cycles that may not be reachable from the picked node.
            dist[i] = 0;
            prev[i] = -1;
        }
        //dist[s] = 0;

        int iteration = 0;
        boolean distChanged;
        do {
            iteration++;
            distChanged = false;
            // for all edges (u, v) in E
            for (int u = 0; u < adj.length; u++) {
                //if (dist[u] == Integer.MAX_VALUE) continue;  // to prevent integer overflow below
                for (int v = 0; v < adj[u].size(); v++) {
                    // if (dist[v] > dist[u] + weight(u, v))
                    if (dist[adj[u].get(v)] > dist[u] + cost[u].get(v)) {
                        dist[adj[u].get(v)] = dist[u] + cost[u].get(v);
                        prev[adj[u].get(v)] = u;
                        distChanged = true;
                    }
                }
            }
        } while (iteration <= adj.length && distChanged);

        if (distChanged) return 1;
        else return 0;
    }

    @SuppressWarnings({"unchecked", "rawtypes"}) // supress warnings generated by generic array
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];
        ArrayList<Integer>[] cost = (ArrayList<Integer>[])new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<Integer>();
            cost[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            int x, y, w;
            x = scanner.nextInt();
            y = scanner.nextInt();
            w = scanner.nextInt();
            adj[x - 1].add(y - 1);
            cost[x - 1].add(w);
        }
        System.out.println(negativeCycle(adj, cost));
    }
}

