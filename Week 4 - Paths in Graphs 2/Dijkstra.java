import java.util.*;

public class Dijkstra {
    private static class Vertex implements Comparable<Vertex>{
        int index;  // index of the current node
        int dist;   // distance to the starting node
        int prev;   // adjacent previous node in the path

        public Vertex (int index, int dist, int prev) {
            this.index = index;
            this.dist = dist;
            this.prev = prev;
        }

        // vertices are compared according to their distances to the starting node
        public int compareTo(Vertex b) {
            return this.dist - b.dist;
        }
    }

    // shortest distance from s -> t
    private static int distance(ArrayList<Integer>[] adj, ArrayList<Integer>[] cost, int s, int t) {
        List<Vertex> vertices = new ArrayList<Vertex>();
        for (int i = 0; i < adj.length; i++) {
            vertices.add(new Vertex(i, Integer.MAX_VALUE, -1));
        }
        vertices.get(s).dist = 0;  // this is the starting node s

        PriorityQueue<Vertex> pq = new PriorityQueue<Vertex>(vertices);
        while (!pq.isEmpty()) {
            Vertex v = pq.poll();
            if (v.dist == Integer.MAX_VALUE) continue;
            int pointer = 0;
            for (int node : adj[v.index]) {  // for each edges starting from v
                Vertex w = vertices.get(node);
                if (w.dist > v.dist + cost[v.index].get(pointer)) {
                    // dist[w] > dist[v] + weight(v, w); this edge can be relaxed
                    w.dist = v.dist + cost[v.index].get(pointer);
                    w.prev = v.index;

                    // change the priority of w after relaxation
                    pq.remove(w);
                    pq.add(w);
                }
                pointer++;
            }
            if (v.index == t) break;  // edges to t have been fully relaxed
        }
        if (vertices.get(t).dist != Integer.MAX_VALUE)
            return vertices.get(t).dist;
        else return -1;  // no path from s to t
    }

    @SuppressWarnings({"unchecked", "rawtypes"}) // supress warnings generated by generic array
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();  // number of vertices
        int m = scanner.nextInt();  // number of edges
        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];
        ArrayList<Integer>[] cost = (ArrayList<Integer>[])new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<Integer>();
            cost[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            int x, y, w;
            x = scanner.nextInt();
            y = scanner.nextInt();
            w = scanner.nextInt();
            adj[x - 1].add(y - 1);
            cost[x - 1].add(w);
        }
        int x = scanner.nextInt() - 1;
        int y = scanner.nextInt() - 1;
        System.out.println(distance(adj, cost, x, y));
    }
}
