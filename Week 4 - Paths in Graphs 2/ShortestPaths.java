import java.util.*;

public class ShortestPaths {
    // the initialization of distance is done in main method
    private static void shortestPaths(ArrayList<Integer>[] adj, ArrayList<Integer>[] cost, int s,
                                      long[] distance) {
        Queue<Integer> queue = new LinkedList<Integer>();
        boolean[] onQueue = new boolean[adj.length];
        queue.add(s);
        onQueue[s] = true;
        distance[s] = 0;

        for (int i = 1; i <= adj.length; i++) {  // loop |V| times to find potential negative cycle
            if (queue.isEmpty()) break;  // ... unless not necessary
            int u = queue.remove();
            onQueue[u] = false;
            // for all edges (u, v) in E
            for (int v = 0; v < adj[u].size(); v++) {
                // if (distance[v] > distance[u] + weight(u, v))
                if (distance[adj[u].get(v)] > distance[u] + (long)cost[u].get(v)) {
                    distance[adj[u].get(v)] = distance[u] + (long)cost[u].get(v);
                    if (!onQueue[adj[u].get(v)]) {
                        queue.add(adj[u].get(v));
                        onQueue[adj[u].get(v)] = true;
                    }
                }
            }
        }

        // use bfs to find all nodes from the negative cycles
        while (!queue.isEmpty()) {
            int u = queue.remove();
            onQueue[u] = false;
            distance[u] = Long.MIN_VALUE;
            for (int v : adj[u]) {
                if (distance[v] > Long.MIN_VALUE) {
                    queue.add(v);
                }
            }
        }
    }

    @SuppressWarnings({"unchecked", "rawtypes"}) // supress warnings generated by generic array
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];
        ArrayList<Integer>[] cost = (ArrayList<Integer>[])new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<Integer>();
            cost[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            int x, y, w;
            x = scanner.nextInt();
            y = scanner.nextInt();
            w = scanner.nextInt();
            adj[x - 1].add(y - 1);
            cost[x - 1].add(w);
        }
        int s = scanner.nextInt() - 1;
        long distance[] = new long[n];
        for (int i = 0; i < n; i++) {
            distance[i] = Long.MAX_VALUE;
        }
        shortestPaths(adj, cost, s, distance);
        for (int i = 0; i < n; i++) {
            if (distance[i] == Long.MAX_VALUE) {  // no path from s to u
                System.out.println('*');
            } else if (distance[i] == Long.MIN_VALUE) { // no shortest path from s to u (has negative cycle)
                System.out.println('-');
            } else {
                System.out.println(distance[i]);
            }
        }
    }
}
